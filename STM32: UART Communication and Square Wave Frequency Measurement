/* USER CODE BEGIN Header */

// HW03

/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "string.h"
#include "stdlib.h"
#include "stdio.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//
// This function displays a new-line
//
void UART_SEND_NL(UART_HandleTypeDef *huart)
{
HAL_UART_Transmit(huart, (uint8_t*)"\n\r", 2, HAL_MAX_DELAY);
}

//
// This function displays a character
//
void UART_SEND_CHR(UART_HandleTypeDef *huart, char c)
{
HAL_UART_Transmit(huart, (uint8_t*)&c, 1, HAL_MAX_DELAY);
}

//
// This function displays an integer number
//
void UART_SEND_INT(UART_HandleTypeDef *huart, int i)
{
char buffer[10];
itoa(i, buffer, 10);
HAL_UART_Transmit(huart, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
}

//
// This function displays text
//
void UART_SEND_TXT(UART_HandleTypeDef *huart, char buffer[])
{
HAL_UART_Transmit(huart, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
}
//
// Read an integer number
//
int ReadInt(void)
{
int n, N = 0;
char readBuf[1];
while(1)
{
HAL_UART_Receive(&huart2, (uint8_t*)readBuf, 1, HAL_MAX_DELAY);
UART_SEND_CHR(&huart2, readBuf[0]);
if(readBuf[0] == '\r')break;
n = atoi(readBuf);
N = 10*N + n;
}
return (N);
}
//
// This function clear the screen
//
void UART_CLR_SCREEN(UART_HandleTypeDef *huart)
{
char clrscr[] = {0x1B, '[', '2' , 'J',0}; // "esc[2J" to Clear the screen
UART_SEND_TXT(&huart2, clrscr);
}
//
// This function set the cursor to home position
//
void UART_CRS_HOME(UART_HandleTypeDef *huart)
{
char homescr[] = {0x1B, '[', 'H' ,0}; // "esc[H" to home position
UART_SEND_TXT(&huart2, homescr);
}
//
// This function set the cursor to home position
//
void UART_CRS_GOTO(UART_HandleTypeDef *huart, int r, int c)
{
char gotoscr[100];
char esc = 0x1B; //ASCII Code for ESC
sprintf(gotoscr,"%c[%d;%dH",esc,r,c);
UART_SEND_TXT(&huart2, gotoscr);
}

int ReadIntTerm(UART_HandleTypeDef *huart)
{
	int n, N = 0;
	char readBuf[1];
	while(1)
	{
		HAL_UART_Receive(huart, (uint8_t*)readBuf, 1, HAL_MAX_DELAY);
		UART_SEND_CHR(huart, readBuf[0]);
		if(readBuf[0] == '\r')break;
			n = atoi(readBuf);
			N = 10*N + n;
	}
return (N);
}

int ReadIntFrom(UART_HandleTypeDef *huart){
	int n, N = 0;
	char readBuf[1];
	while(1){
		HAL_UART_Receive(huart, (uint8_t*)readBuf, 1, HAL_MAX_DELAY);
		UART_SEND_CHR(huart, readBuf[0]);

		if(readBuf[0] == '5')break;
			n = atoi(readBuf);
			N = 10*N + n;
	}
return (N);
}


void ReadCharTerm(UART_HandleTypeDef *huart, char strArray[])
{
	int currLoc = 0;
	char readBuf[1];

	while(1)
	{
		HAL_UART_Receive(huart, (uint8_t*)readBuf, 1, HAL_MAX_DELAY);
		UART_SEND_CHR(&huart2, readBuf[0]);
		if(readBuf[0] == '\r')break;
		strArray[currLoc] = readBuf[0];
		currLoc++;
	}
}




/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  // put outside of while loop:
  	  int tickStartHigh = 0;
  	  int tickStartLow = 0;
  	  int pinTimeHigh = 0;
  	  int pinTimeLow = 0;
  	  int totalTime = 0;
  	  int freq1 = 0;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //PSEUDOCODE
	  	  //read input of square wave (0 to 5v, amplitude of 5 with a 2.5v offset)
	  	  	  //maybe while loop of how long it is 1, how long it is 0
	  	  	  //breaks out of while loop when it changes
	  	  	  //starts with while(x==1) then breaks out to while(x==0)
	  	  	  	  //use HAL_GetTick() in both of these while loops, assigning the ending values to two different variables
	  	  //use that information to calculate the frequency
	  	  //outputs the frequency to the terminal twice every second (500ms)

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET) {
	  	  // put in while loop:
	  	  tickStartHigh = HAL_GetTick();					// get starting point for when signal goes to 1
	  	  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET) {								// stay in while loop while signal is high
	  	  }
	  	  pinTimeHigh = HAL_GetTick() - tickStartHigh;		// calculate time the pin is high in milliseconds

	  	  tickStartLow = HAL_GetTick();						// get starting point for when signal goes to 0
	  	  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_RESET) {								// stay in while loop while signal is low
	  	  }
	  	  pinTimeLow = HAL_GetTick() - tickStartLow;		// calculate time the pin is low in milliseconds

	  	  totalTime = pinTimeHigh + pinTimeLow;				// calculate total time
	  	  freq1 = 1 / totalTime;							// calculate frequency

	  	  HAL_Delay(500);									// send twice a second
	  	  UART_SEND_NL(&huart2);
	  	  UART_SEND_INT(&huart2, freq1);					// send frequency to terminal
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
