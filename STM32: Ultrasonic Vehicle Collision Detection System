/* USER CODE BEGIN Header */
//  FINAL EXAM //
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
int outputRdy = 0;
int totalTime = 0;
float numTicks = 0;
volatile int startTime = 0;
volatile int endTime = 0;
char buffer[100];
char horizPos[] =         "____________________";
char vehicleSpeed[] =     "> > > > > > > > > > >";
char vehicleCollision[] = "____________________";
int scaledDistance = 0;
int scaledSpeed = 0;
int HUDStart = 0;
int HUDEnd = 0;
int HUDVal = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	// ECHO
	HAL_TIM_Base_Start(&htim1); 						// start TIM1 timer
	TIM1->CNT = 0;										// set the timer count to 0
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == 1) {}  // while the pin is high, let the timer count
	numTicks = TIM1->CNT;								// store the value after it goes low
	HAL_TIM_Base_Stop(&htim1); 							// stop TIM1 timer

}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ultrasonicDistance() {	// this function returns a duty cycle value from 0 to 100 for use with the duty cycle function
	// numTicks ranges from ~4700 (farthest away) to 100 (closest)
		// based on the number of ticks (the distance from an object to the sensor):
			// use the numTicks value to change the duty cycle for the motor
			// convert the value to a scale of 0 to 100 for use with the PWM code

//	sprintf(buffer, "ultrasonic numTicks: %f\n\r", numTicks);
//	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);

// LED PIN PA5
	if(numTicks <= 800) {	// if an object is close, turn on LED
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	}
	else {					// if an object is far, turn off LED
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	}
	// TRIGGER PULSE PIN PC9
	endTime = HAL_GetTick();				// time stamp for trigger pulse cycle

	if((endTime - startTime) >= 500) {	// send trigger pulse every second
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
		for(int i = 0; i < 500; i++) {		// keep pin high for 10 microseconds
			for(int j = 0; j < 500; j++) {}
		}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);	// set trigger pin back to low
		startTime = HAL_GetTick();							// get time stamp for next trigger cycle
	}

	scaledDistance = (((numTicks - 100)/4600) * 100);
//	sprintf(buffer, "scaled distance: %d\n\n\n\r\r\r", scaledDistance);
//	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
}

void SEND_TXT(UART_HandleTypeDef *huart, char buffer[]) {
	HAL_UART_Transmit(huart, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
}

void CLR_SCREEN(UART_HandleTypeDef *huart) {
	char clrscr[] = {0x1B, '[', '2' , 'J',0}; // "esc[2J" to Clear the screen
	SEND_TXT(&huart2, clrscr);
}

void vehicleHUD() {
// serial monitor display to show important information
	HUDStart = HAL_GetTick();

		SEND_TXT(&huart2,"   /==========================================================================\\\n\r");
		SEND_TXT(&huart2,"   ||	                                                                     ||\n\r");

	if(scaledDistance <= 15 && scaledSpeed > 0) {
		SEND_TXT(&huart2,"   ||                     ███████ ████████  ██████  ██████                   ||\n\r");
		SEND_TXT(&huart2,"   ||                     ██         ██    ██    ██ ██   ██                  ||\n\r");
		SEND_TXT(&huart2,"   ||                     ███████    ██    ██    ██ ██████                   ||\n\r");
		SEND_TXT(&huart2,"   ||                          ██    ██    ██    ██ ██                       ||\n\r");
		SEND_TXT(&huart2,"   ||                     ███████    ██     ██████  ██                       ||\n\r");
	}
	else if(scaledSpeed > 75) {
		SEND_TXT(&huart2,"   ||              ░▒▓████████▓▒░▒▓██████▓▒░ ░▒▓███████▓▒░▒▓████████▓▒░      ||\n\r");
		SEND_TXT(&huart2,"   ||            ░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░         ░▒▓█▓▒░            ||\n\r");
		SEND_TXT(&huart2,"   ||           ░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░         ░▒▓█▓▒░             ||\n\r");
		SEND_TXT(&huart2,"   ||          ░▒▓██████▓▒░░▒▓████████▓▒░░▒▓██████▓▒░   ░▒▓█▓▒░              ||\n\r");
		SEND_TXT(&huart2,"   ||         ░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░      ░▒▓█▓▒░  ░▒▓█▓▒░               ||\n\r");
		SEND_TXT(&huart2,"   ||       ░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░      ░▒▓█▓▒░  ░▒▓█▓▒░                 ||\n\r");
		SEND_TXT(&huart2,"   ||      ░▒▓█▓▒░     ░▒▓█▓▒░░▒▓█▓▒░▒▓███████▓▒░   ░▒▓█▓▒░                  ||\n\r");
	}
    else if(scaledSpeed < 25) {
		SEND_TXT(&huart2,"   ||                ███████╗██╗      ██████╗ ██╗    ██╗                     ||\n\r");
		SEND_TXT(&huart2,"   ||                 ██╔════╝██║     ██╔═══██╗██║    ██║                    ||\n\r");
		SEND_TXT(&huart2,"   ||                  ███████╗██║     ██║   ██║██║ █╗ ██║                   ||\n\r");
		SEND_TXT(&huart2,"   ||                   ╚════██║██║     ██║   ██║██║███╗██║                  ||\n\r");
		SEND_TXT(&huart2,"   ||                    ███████║███████╗╚██████╔╝╚███╔███╔╝                 ||\n\r");
		SEND_TXT(&huart2,"   ||                    ╚══════╝╚══════╝ ╚═════╝  ╚══╝╚══╝                  ||\n\r");
    }
    else {
		SEND_TXT(&huart2,"   || ░░      ░░░       ░░░  ░░░░  ░░        ░░░      ░░░        ░░   ░░░  ░ ||\n\r");
		SEND_TXT(&huart2,"   || ▒  ▒▒▒▒  ▒▒  ▒▒▒▒  ▒▒  ▒▒▒▒  ▒▒▒▒▒  ▒▒▒▒▒  ▒▒▒▒▒▒▒▒▒▒▒  ▒▒▒▒▒    ▒▒  ▒ ||\n\r");
		SEND_TXT(&huart2,"   || ▓  ▓▓▓▓▓▓▓▓       ▓▓▓  ▓▓▓▓  ▓▓▓▓▓  ▓▓▓▓▓▓      ▓▓▓▓▓▓  ▓▓▓▓▓  ▓  ▓  ▓ ||\n\r");
		SEND_TXT(&huart2,"   || █  ████  ██  ███  ███  ████  █████  ███████████  █████  █████  ██    █ ||\n\r");
		SEND_TXT(&huart2,"   || ██      ███  ████  ███      ███        ███      ███        ██  ███   █ ||\n\r");
    }
		SEND_TXT(&huart2,"   ||	                                                                     ||\n\r");
		SEND_TXT(&huart2,"   ||========================================================================||\n\r");
		SEND_TXT(&huart2,"   ||	                                                                     ||\n\r");
		SEND_TXT(&huart2,"   || ( Horizontal Position )       ");
		SEND_TXT(&huart2, horizPos); SEND_TXT(&huart2, "                     ||\n\r");
		SEND_TXT(&huart2,"   ||	                                                                     ||\n\r");
		SEND_TXT(&huart2,"   ||       ( Speed )               ");
		SEND_TXT(&huart2, vehicleSpeed); SEND_TXT(&huart2, "                    ||\n\r");
		SEND_TXT(&huart2,"   ||	                                                                     ||\n\r");
		SEND_TXT(&huart2,"   || ( Collision Detection )       ");
		SEND_TXT(&huart2, vehicleCollision); SEND_TXT(&huart2, "                     ||\n\r");
		SEND_TXT(&huart2,"   ||	                                                                     ||\n\r");
		SEND_TXT(&huart2,"   \\==========================================================================/\n\r");

}

void refreshHud() {
	  if(HUDVal == 0) {HUDStart = HAL_GetTick(); HUDEnd = HUDStart + 1000; HUDVal = 1;}	// refresh HUD every 500ms
	  if(HAL_GetTick() > HUDEnd) {CLR_SCREEN(&huart2); vehicleHUD(); HUDVal = 0;}
}

void collisionDetection() {
	  for(int i = 0; i < 20; i++) {					// refresh collision display
		  vehicleCollision[i] = '_';
	  }
	  if(scaledDistance < 97) {						// only print a potential collision if something is close by
		  vehicleCollision[scaledDistance/5] = '#';
	  }
	  for(int i = 0; i < 20; i++) {					// put an indicator on how far away a potential collision is
		  if(vehicleCollision[i] != '#') {
			  vehicleCollision[i] = '_';
		  }
	  }
}


//void DutyCycle(float Duty, int Channel) {	// takes in a value from 0 to 100 to use as a percentage
//	uint16_t AutoReload, SetDutyCycle;
//	//Get the PWM period of TIM2
//	AutoReload = __HAL_TIM_GET_AUTORELOAD(&htim2);
//	//Convert the Duty % to microSecond
//	SetDutyCycle = AutoReload * Duty / 100.0;
//	//Set CCRx to change the Duty Cycle
//	__HAL_TIM_SET_COMPARE(&htim2, Channel, SetDutyCycle);
//}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM1_Init();
  /* USER CODE BEGIN 2 */
  startTime = HAL_GetTick();
  HUDStart = HAL_GetTick();
  HUDEnd = HUDStart + 200;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // ULTRASONIC SENSOR //
	  // trigger pin: PC9
	  // echo pin: PC7
	  ultrasonicDistance();

	  // SERIAL HUD
	  collisionDetection();
	  refreshHud();

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 320;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 80;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
